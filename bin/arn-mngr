#!/usr/bin/lua
--[[
Desc:
    ARN Device Manager
    
Tasks:
    1. call "arn.mngr", filter all input
    2. read limits from "/etc/config/arn-spec"
    3. finally, set via "arn.hal_raw"
    4. "arn.mngr" provide CACHE
    5. "qutil.rarp" provide RARP (+rarp-client +rarp-server)
    
Maintainer: 
    by Qige <qigezhao@gmail.com>
    2017.08.18|2017.08.22 v1.0
    2017.08.29 v1.1
    2017.10.19 v2.0 continue ARN-Scripts; plan to add ARN-iOMC3-Agent
]]--

--local DBG = print
local function DBG(msg) end

local mngr = require 'arn.device.mngr'
local rarp = require 'arn.utils.rarp'
local ccff = require 'arn.utils.ccff'
local is_array  = ccff.val.is_array
local sfmt      = string.format
local ssub      = string.sub
local slen      = string.len
local exec      = ccff.execute

local VERSION = 'ARN-Scripts (+HAL +Cache +5Kv2) v2.0-191017Q'

local arg_key = tostring(arg[1]) -- nil > 'nil'
local arg_val = tostring(arg[2]) -- nil > 'nil'

local function help()
  print "usage: "
  print "  arn-mngr [a|all]"
  print "  arn-mngr [channel|region|txpower|chanbw|freq] [value]"
end

local function concat_items(obj)
    local result = ''
    local cnt = 0
    if (is_array(obj)) then
        table.sort(obj)
        for i,v in pairs(obj) do
            -- in case v is 'table'
            if (v and type(v) ~= 'table') then
                if (i ~= 'timeout' and i ~= 'elapsed') then
                    if (cnt % 4 == 0) then
                        result = result .. '\n'
                    else
                        if (result ~= '') then result = result .. ' | ' end
                    end
                    if (slen(i) > 7) then
                        i = ssub(i, 1, 7)
                    end
                    if (slen(v) > 8) then
                        v = ssub(v, 1, 8)
                    end
                    result = result .. sfmt('%7s: %-8s', i, v)
                    cnt = cnt + 1
                end
            end
        end
    end
    return result
end

local function valid_signal(signal, noise)
    if (signal and noise and signal > noise) then
        return signal
    end
    return '---'
end

local function calc_snr(signal, noise)
    if (signal and noise and signal > noise) then
        return signal - noise
    end
    return '---'
end

local function format_abb(obj)
    local result = ''
    
    local s1, s2
    s1 = sfmt('   SSID: %s (%s)\n', obj.ssid or '---', obj.mode)
    result = result .. s1

    s2 = sfmt('  BSSID: %-28s\n', obj.bssid or '---')
    result = result .. s2

    s1 = sfmt('  Noise: %-4s dBm |  Signal: %-4s dBm |     SNR: %-8s\n', 
            obj.noise, valid_signal(obj.signal, obj.noise), 
                calc_snr(obj.signal, obj.noise))
    result = result .. s1

    result = result .. '\n'
    
    local peers = obj.peers
    if (peers and type(peers) == 'table' and #peers > 0) then
        for idx,peer in pairs(peers) do
            s2 = sfmt('link#%02d: %-23s | %s/%s/%s | Rx %s/%s | Tx %s/%s | %.2fs\n', 
                    idx, rarp.FETCH_IP(peer.wmac), 
                    valid_signal(peer.signal, peer.noise), peer.noise, 
                    calc_snr(peer.signal, peer.noise), peer.rx_mcs, peer.rx_br,
                    peer.tx_mcs, peer.tx_br, 
                    peer.inactive/1000)
            result = result .. s2
        end
    else
        s2 = sfmt('  Links: (not connected)\n')
        result = result .. s2
    end
    
    return result
end
local function format_radio(key, obj)
    local result = sfmt("%s", concat_items(obj))
    return result .. '\n'
end

local function format_thrpt(val)
    local thrpt = '0.00 Kbps'
    if (val) then
        local bps = tonumber(val)
        if (bps > 1024 * 1024) then
            thrpt = sfmt("%.2f Mbps", (bps / 1024 / 1024))
        else
            thrpt = sfmt("%.2f Kbps", (bps / 1024))
        end
    end
    return thrpt
end

local function format_nw(key, obj)
    local result = sfmt('  thrpt: Rx %s, Tx %s ("arn -m" ONLY, not accurate)', 
            format_thrpt(obj.rx), format_thrpt(obj.tx))
    return result
end

local function format_ts(elapsed, timeout)
    local result = sfmt('%80s\n', VERSION)
    result = result .. sfmt("%79s", sfmt("> %s/%s <", (elapsed or 0), (timeout or 0)))
    return result
end

--[[
TODO: 
    1. re-design display format;
    2. encode result with 'JSON' module.
Tasks:
    1. get gws raw table via "arn.mngr"
    2. decide what to display by user input;
]]--
local function print_with_filter(key)
    local result = ''

    local gws_safe_raw  = mngr.SAFE_GET('with_unit')
    local safe_abb      = gws_safe_raw.abb_safe
    local safe_radio    = gws_safe_raw.radio_safe
    local safe_nw       = gws_safe_raw.nw_thrpt

    result = result .. format_ts(safe_radio.elapsed, safe_radio.timeout) .. '\n'
    result = result .. format_abb(safe_abb) .. '\n'
    result = result .. format_radio(key, safe_radio) .. '\n'
    result = result .. format_nw(key, safe_nw)

    print(result)
end

local function print_set_result(k, v)
    --print(sfmt("set %s=%s", k, v))
end

-- SAFE_SET() will call SAFE_SAVE() automatically
if (arg_key ~= 'nil') then
    if (arg_val ~= 'nil') then
        local k,v = mngr.SAFE_SET(arg_key, arg_val)
        print_set_result(k, v)
    else
        DBG(sfmt("> %s", arg_key))
        if (arg_key == 'clear') then
            mngr.CLEAR()
        else
            print_with_filter(arg_key)
        end
    end
else
    help()
end